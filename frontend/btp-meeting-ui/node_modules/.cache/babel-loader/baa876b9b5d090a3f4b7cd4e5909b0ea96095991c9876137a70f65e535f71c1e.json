{"ast":null,"code":"// remplacer toute référence à \"/api/...\" par l’URL complète\nconst BASE = \"http://localhost:8000\";\nexport async function startRecording() {\n  const res = await fetch(`${BASE}/start-recording`, {\n    method: \"POST\"\n  });\n  return (await res.json()).id;\n}\nexport async function stopRecording(id) {\n  await fetch(`${BASE}/stop-recording?id=${encodeURIComponent(id)}`, {\n    method: \"POST\"\n  });\n}\nexport async function fetchRecordings() {\n  const res = await fetch(`${BASE}/recordings`);\n  return res.ok ? res.json() : [];\n}\n\n// pour l’upload avec progression\nexport function uploadAudio(file, onProgress) {\n  const form = new FormData();\n  form.append(\"file\", file);\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", `${BASE}/upload`);\n    xhr.upload.onprogress = e => onProgress(Math.round(e.loaded * 100 / e.total));\n    xhr.onload = () => xhr.status === 200 ? resolve(JSON.parse(xhr.responseText).id) : reject(xhr);\n    xhr.onerror = () => reject(new Error(\"Erreur réseau\"));\n    xhr.send(form);\n  });\n}","map":{"version":3,"names":["BASE","startRecording","res","fetch","method","json","id","stopRecording","encodeURIComponent","fetchRecordings","ok","uploadAudio","file","onProgress","form","FormData","append","Promise","resolve","reject","xhr","XMLHttpRequest","open","upload","onprogress","e","Math","round","loaded","total","onload","status","JSON","parse","responseText","onerror","Error","send"],"sources":["/Users/nekmouche/Desktop/Projet RaHa/MVP/frontend/btp-meeting-ui/src/api.js"],"sourcesContent":["// remplacer toute référence à \"/api/...\" par l’URL complète\nconst BASE = \"http://localhost:8000\" \n\nexport async function startRecording() {\n  const res = await fetch(`${BASE}/start-recording`, { method: \"POST\" })\n  return (await res.json()).id\n}\n\nexport async function stopRecording(id) {\n  await fetch(`${BASE}/stop-recording?id=${encodeURIComponent(id)}`, { method: \"POST\" })\n}\n\nexport async function fetchRecordings() {\n  const res = await fetch(`${BASE}/recordings`)\n  return res.ok ? res.json() : []\n}\n\n// pour l’upload avec progression\nexport function uploadAudio(file, onProgress) {\n  const form = new FormData()\n  form.append(\"file\", file)\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n    xhr.open(\"POST\", `${BASE}/upload`)\n    xhr.upload.onprogress = e => onProgress(Math.round(e.loaded * 100 / e.total))\n    xhr.onload  = () => xhr.status === 200 ? resolve(JSON.parse(xhr.responseText).id) : reject(xhr)\n    xhr.onerror = () => reject(new Error(\"Erreur réseau\"))\n    xhr.send(form)\n  })\n}\n"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAG,uBAAuB;AAEpC,OAAO,eAAeC,cAAcA,CAAA,EAAG;EACrC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGH,IAAI,kBAAkB,EAAE;IAAEI,MAAM,EAAE;EAAO,CAAC,CAAC;EACtE,OAAO,CAAC,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC,EAAEC,EAAE;AAC9B;AAEA,OAAO,eAAeC,aAAaA,CAACD,EAAE,EAAE;EACtC,MAAMH,KAAK,CAAC,GAAGH,IAAI,sBAAsBQ,kBAAkB,CAACF,EAAE,CAAC,EAAE,EAAE;IAAEF,MAAM,EAAE;EAAO,CAAC,CAAC;AACxF;AAEA,OAAO,eAAeK,eAAeA,CAAA,EAAG;EACtC,MAAMP,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGH,IAAI,aAAa,CAAC;EAC7C,OAAOE,GAAG,CAACQ,EAAE,GAAGR,GAAG,CAACG,IAAI,CAAC,CAAC,GAAG,EAAE;AACjC;;AAEA;AACA,OAAO,SAASM,WAAWA,CAACC,IAAI,EAAEC,UAAU,EAAE;EAC5C,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC3BD,IAAI,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;EACzB,OAAO,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;IAChCD,GAAG,CAACE,IAAI,CAAC,MAAM,EAAE,GAAGtB,IAAI,SAAS,CAAC;IAClCoB,GAAG,CAACG,MAAM,CAACC,UAAU,GAAGC,CAAC,IAAIZ,UAAU,CAACa,IAAI,CAACC,KAAK,CAACF,CAAC,CAACG,MAAM,GAAG,GAAG,GAAGH,CAAC,CAACI,KAAK,CAAC,CAAC;IAC7ET,GAAG,CAACU,MAAM,GAAI,MAAMV,GAAG,CAACW,MAAM,KAAK,GAAG,GAAGb,OAAO,CAACc,IAAI,CAACC,KAAK,CAACb,GAAG,CAACc,YAAY,CAAC,CAAC5B,EAAE,CAAC,GAAGa,MAAM,CAACC,GAAG,CAAC;IAC/FA,GAAG,CAACe,OAAO,GAAG,MAAMhB,MAAM,CAAC,IAAIiB,KAAK,CAAC,eAAe,CAAC,CAAC;IACtDhB,GAAG,CAACiB,IAAI,CAACvB,IAAI,CAAC;EAChB,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}