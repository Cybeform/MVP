{"ast":null,"code":"// frontend/btp-meeting-ui/src/api.js\n\n/**\n * Démarre un enregistrement sur le back.\n * @returns {Promise<string>} l’ID de l’enregistrement\n */\nexport async function startRecording() {\n  const res = await fetch('/api/start-recording', {\n    method: 'POST'\n  });\n  if (!res.ok) {\n    throw new Error(`Erreur start-recording: ${res.status}`);\n  }\n  const {\n    id\n  } = await res.json();\n  return id;\n}\n\n/**\n * Arrête un enregistrement existant.\n * @param {string} id \n * @returns {Promise<string>} l’ID (même que celui passé)\n */\nexport async function stopRecording(id) {\n  const res = await fetch(`/api/stop-recording?id=${encodeURIComponent(id)}`, {\n    method: 'POST'\n  });\n  if (!res.ok) {\n    throw new Error(`Erreur stop-recording: ${res.status}`);\n  }\n  const {\n    id: returnedId\n  } = await res.json();\n  return returnedId;\n}\n\n/**\n * Récupère la liste des enregistrements.\n * @returns {Promise<Array>}\n */\nexport async function fetchRecordings() {\n  const res = await fetch('/api/recordings');\n  if (!res.ok) {\n    throw new Error(`Erreur fetch-recordings: ${res.status}`);\n  }\n  return res.json();\n}","map":{"version":3,"names":["startRecording","res","fetch","method","ok","Error","status","id","json","stopRecording","encodeURIComponent","returnedId","fetchRecordings"],"sources":["/Users/nekmouche/Desktop/Projet RaHa/MVP/frontend/btp-meeting-ui/src/api.js"],"sourcesContent":["// frontend/btp-meeting-ui/src/api.js\n\n/**\n * Démarre un enregistrement sur le back.\n * @returns {Promise<string>} l’ID de l’enregistrement\n */\nexport async function startRecording() {\n  const res = await fetch('/api/start-recording', { method: 'POST' })\n  if (!res.ok) {\n    throw new Error(`Erreur start-recording: ${res.status}`)\n  }\n  const { id } = await res.json()\n  return id\n}\n\n/**\n * Arrête un enregistrement existant.\n * @param {string} id \n * @returns {Promise<string>} l’ID (même que celui passé)\n */\nexport async function stopRecording(id) {\n  const res = await fetch(`/api/stop-recording?id=${encodeURIComponent(id)}`, {\n    method: 'POST'\n  })\n  if (!res.ok) {\n    throw new Error(`Erreur stop-recording: ${res.status}`)\n  }\n  const { id: returnedId } = await res.json()\n  return returnedId\n}\n\n/**\n * Récupère la liste des enregistrements.\n * @returns {Promise<Array>}\n */\nexport async function fetchRecordings() {\n  const res = await fetch('/api/recordings')\n  if (!res.ok) {\n    throw new Error(`Erreur fetch-recordings: ${res.status}`)\n  }\n  return res.json()\n}\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeA,cAAcA,CAAA,EAAG;EACrC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,sBAAsB,EAAE;IAAEC,MAAM,EAAE;EAAO,CAAC,CAAC;EACnE,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE;IACX,MAAM,IAAIC,KAAK,CAAC,2BAA2BJ,GAAG,CAACK,MAAM,EAAE,CAAC;EAC1D;EACA,MAAM;IAAEC;EAAG,CAAC,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC;EAC/B,OAAOD,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeE,aAAaA,CAACF,EAAE,EAAE;EACtC,MAAMN,GAAG,GAAG,MAAMC,KAAK,CAAC,0BAA0BQ,kBAAkB,CAACH,EAAE,CAAC,EAAE,EAAE;IAC1EJ,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE;IACX,MAAM,IAAIC,KAAK,CAAC,0BAA0BJ,GAAG,CAACK,MAAM,EAAE,CAAC;EACzD;EACA,MAAM;IAAEC,EAAE,EAAEI;EAAW,CAAC,GAAG,MAAMV,GAAG,CAACO,IAAI,CAAC,CAAC;EAC3C,OAAOG,UAAU;AACnB;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeC,eAAeA,CAAA,EAAG;EACtC,MAAMX,GAAG,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;EAC1C,IAAI,CAACD,GAAG,CAACG,EAAE,EAAE;IACX,MAAM,IAAIC,KAAK,CAAC,4BAA4BJ,GAAG,CAACK,MAAM,EAAE,CAAC;EAC3D;EACA,OAAOL,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}