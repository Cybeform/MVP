{"ast":null,"code":"// api.js\nconst BASE = 'http://localhost:8000/api';\nexport async function startRecording() {\n  const res = await fetch(`${BASE}/start-recording`, {\n    method: 'POST'\n  });\n  const {\n    id\n  } = await res.json();\n  return id;\n}\nexport async function stopRecording(id) {\n  await fetch(`${BASE}/stop-recording?id=${encodeURIComponent(id)}`, {\n    method: 'POST'\n  });\n}\nexport async function fetchRecordings() {\n  const res = await fetch(`${BASE}/recordings`);\n  return res.json();\n}\nexport async function uploadAudio(file, onProgress) {\n  const form = new FormData();\n  form.append('file', file);\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', `${BASE}/upload`);\n    xhr.upload.onprogress = ev => onProgress(Math.round(ev.loaded * 100 / ev.total));\n    xhr.onload = () => res.status === 200 ? resolve(JSON.parse(xhr.responseText).id) : reject(xhr);\n    xhr.onerror = () => reject(new Error('Erreur réseau'));\n    xhr.send(form);\n  });\n}","map":{"version":3,"names":["BASE","startRecording","res","fetch","method","id","json","stopRecording","encodeURIComponent","fetchRecordings","uploadAudio","file","onProgress","form","FormData","append","Promise","resolve","reject","xhr","XMLHttpRequest","open","upload","onprogress","ev","Math","round","loaded","total","onload","status","JSON","parse","responseText","onerror","Error","send"],"sources":["/Users/nekmouche/Desktop/Projet RaHa/MVP/frontend/btp-meeting-ui/src/api.js"],"sourcesContent":["// api.js\nconst BASE = 'http://localhost:8000/api'\n\nexport async function startRecording() {\n  const res = await fetch(`${BASE}/start-recording`, { method: 'POST' })\n  const { id } = await res.json()\n  return id\n}\n\nexport async function stopRecording(id) {\n  await fetch(`${BASE}/stop-recording?id=${encodeURIComponent(id)}`, { method: 'POST' })\n}\n\nexport async function fetchRecordings() {\n  const res = await fetch(`${BASE}/recordings`)\n  return res.json()\n}\n\nexport async function uploadAudio(file, onProgress) {\n  const form = new FormData()\n  form.append('file', file)\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n    xhr.open('POST', `${BASE}/upload`)\n    xhr.upload.onprogress = ev => onProgress(Math.round(ev.loaded * 100 / ev.total))\n    xhr.onload    = () => res.status === 200 ? resolve(JSON.parse(xhr.responseText).id) : reject(xhr)\n    xhr.onerror   = () => reject(new Error('Erreur réseau'))\n    xhr.send(form)\n  })\n}\n"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAG,2BAA2B;AAExC,OAAO,eAAeC,cAAcA,CAAA,EAAG;EACrC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGH,IAAI,kBAAkB,EAAE;IAAEI,MAAM,EAAE;EAAO,CAAC,CAAC;EACtE,MAAM;IAAEC;EAAG,CAAC,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;EAC/B,OAAOD,EAAE;AACX;AAEA,OAAO,eAAeE,aAAaA,CAACF,EAAE,EAAE;EACtC,MAAMF,KAAK,CAAC,GAAGH,IAAI,sBAAsBQ,kBAAkB,CAACH,EAAE,CAAC,EAAE,EAAE;IAAED,MAAM,EAAE;EAAO,CAAC,CAAC;AACxF;AAEA,OAAO,eAAeK,eAAeA,CAAA,EAAG;EACtC,MAAMP,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGH,IAAI,aAAa,CAAC;EAC7C,OAAOE,GAAG,CAACI,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeI,WAAWA,CAACC,IAAI,EAAEC,UAAU,EAAE;EAClD,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC3BD,IAAI,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;EACzB,OAAO,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;IAChCD,GAAG,CAACE,IAAI,CAAC,MAAM,EAAE,GAAGrB,IAAI,SAAS,CAAC;IAClCmB,GAAG,CAACG,MAAM,CAACC,UAAU,GAAGC,EAAE,IAAIZ,UAAU,CAACa,IAAI,CAACC,KAAK,CAACF,EAAE,CAACG,MAAM,GAAG,GAAG,GAAGH,EAAE,CAACI,KAAK,CAAC,CAAC;IAChFT,GAAG,CAACU,MAAM,GAAM,MAAM3B,GAAG,CAAC4B,MAAM,KAAK,GAAG,GAAGb,OAAO,CAACc,IAAI,CAACC,KAAK,CAACb,GAAG,CAACc,YAAY,CAAC,CAAC5B,EAAE,CAAC,GAAGa,MAAM,CAACC,GAAG,CAAC;IACjGA,GAAG,CAACe,OAAO,GAAK,MAAMhB,MAAM,CAAC,IAAIiB,KAAK,CAAC,eAAe,CAAC,CAAC;IACxDhB,GAAG,CAACiB,IAAI,CAACvB,IAAI,CAAC;EAChB,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}